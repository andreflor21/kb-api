// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Routes {
  id          String    @id @default(uuid())
  description String    @db.VarChar(100)
  path        String    @db.VarChar(100)
  method      String?   @db.VarChar(10)
  profile     Profile[] @relation("ProfileToRoutes")

  @@map("routes")
}

model Profile {
  id          String   @id @default(uuid())
  description String   @db.VarChar(100)
  users       User[]
  routes      Routes[] @relation("ProfileToRoutes")

  @@map("profiles")
}

model User {
  id                String     @id @default(uuid())
  name              String     @db.VarChar(100)
  email             String     @unique @db.VarChar(100)
  cpf               String?    @unique @db.VarChar(14)
  code              String?    @db.VarChar(50)
  birthdate         DateTime?  @db.Date
  hashedPassword    String     @map("hashed_password") @db.VarChar(255)
  createdAt         DateTime   @default(now()) @map("created_at") @db.DateTime(0)
  active            Boolean    @default(true)
  changePassword    Boolean    @default(false) @map("change_password")
  profileId         String     @map("profile_id")
  tokenReset        String?    @map("token_reset") @db.VarChar(200)
  tokenResetExpires DateTime?  @map("token_reset_expires") @db.DateTime(0)
  suppliers         Supplier[]
  profile           Profile    @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([profileId], map: "users_profile_id_fkey")
  @@map("users")
}

model SectionType {
  id          String    @id @default(uuid())
  abrev       String?   @unique @db.VarChar(10)
  description String    @unique @db.VarChar(100)
  section     Section[]

  @@map("section_types")
}

model Section {
  id               String      @id @default(uuid())
  description      String      @unique @db.VarChar(100)
  code             String      @db.VarChar(10)
  branchMatrixCode String      @map("brnach_matrix_code") @db.VarChar(10)
  ERPcode          String?     @map("erp_code") @db.VarChar(10)
  sectionTypeId    String      @map("section_type_id")
  active           Boolean     @default(true)
  sectionType      SectionType @relation(fields: [sectionTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([sectionTypeId], map: "section_section_type_id_fkey")
  @@map("sections")
}

model Supplier {
  id        String            @id @default(uuid())
  code      String            @map("code") @db.VarChar(10)
  ERPCode   String            @map("erp_code") @db.VarChar(10)
  name      String            @db.VarChar(100)
  legalName String            @map("legal_name") @db.VarChar(100)
  cnpj      String            @unique @db.VarChar(14)
  userId    String?           @map("user_resp_id")
  fone      String?           @db.VarChar(20)
  email     String?           @db.VarChar(50)
  active    Boolean           @default(true)
  createdAt DateTime          @default(now()) @map("created_at") @db.DateTime(0)
  addresses SupplierAddress[]
  userResp  User?             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([userId], map: "supplier_user_id_fkey")
  @@map("suppliers")
}

model SupplierAddress {
  id            String       @id @default(uuid())
  lograd        String       @db.VarChar(100)
  number        String       @db.VarChar(20)
  complement    String?      @db.VarChar(100)
  district      String       @db.VarChar(100)
  city          String       @db.VarChar(100)
  state         String       @db.VarChar(2)
  zipcode       String       @db.VarChar(9)
  supplierId    String       @map("supplier_id")
  addressTypeId String?      @map("address_type_id")
  supplier      Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  addressType   AddressType? @relation(fields: [addressTypeId], references: [id], onUpdate: NoAction)

  @@index([supplierId], map: "supplier_address_supplier_id_fkey")
  @@index([addressTypeId], map: "supplier_address_address_type_id_fkey")
  @@map("supplier_addresses")
}

model AddressType {
  id          String            @id @default(uuid())
  description String            @unique @db.VarChar(50)
  addresses   SupplierAddress[]

  @@map("address_types")
}
