// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Routes {
  id          String    @id @default(uuid())
  description String    @db.VarChar(100)
  path        String    @db.VarChar(100)
  method      String?   @db.VarChar(10)
  profile     Profile[] @relation("ProfileToRoutes")

  @@map("routes")
}

model Profile {
  id          String   @id @default(uuid())
  description String   @unique @db.VarChar(100)
  users       User[]
  routes      Routes[] @relation("ProfileToRoutes")

  @@map("profiles")
}

model User {
  id                String     @id @default(uuid())
  name              String     @db.VarChar(100)
  email             String     @unique @db.VarChar(100)
  cpf               String?    @unique @db.VarChar(14)
  code              String?    @db.VarChar(50)
  birthdate         DateTime?  @db.Date
  hashedPassword    String     @map("hashed_password") @db.VarChar(255)
  createdAt         DateTime   @default(now()) @map("created_at") @db.DateTime(0)
  active            Boolean    @default(true)
  changePassword    Boolean    @default(false) @map("change_password")
  profileId         String     @map("profile_id")
  tokenReset        String?    @map("token_reset") @db.VarChar(200)
  tokenResetExpires DateTime?  @map("token_reset_expires") @db.DateTime(0)
  suppliers         Supplier[] @relation("UserToSupplier")
  profile           Profile    @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([profileId], map: "users_profile_id_fkey")
  @@map("users")
}

model SectionType {
  id          String    @id @default(uuid())
  abrev       String?   @unique @db.VarChar(10)
  description String    @unique @db.VarChar(100)
  section     Section[]

  @@map("section_types")
}

model Section {
  id               String      @id @default(uuid())
  description      String      @unique @db.VarChar(100)
  code             String      @db.VarChar(10)
  branchMatrixCode String      @map("brnach_matrix_code") @db.VarChar(10)
  ERPcode          String?     @map("erp_code") @db.VarChar(10)
  sectionTypeId    String      @map("section_type_id")
  active           Boolean     @default(true)
  sectionType      SectionType @relation(fields: [sectionTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([sectionTypeId], map: "section_section_type_id_fkey")
  @@map("sections")
}

model Supplier {
  id           String                 @id @default(uuid())
  code         String?                @map("code") @db.VarChar(10)
  ERPCode      String?                @map("erp_code") @db.VarChar(10)
  name         String                 @unique @db.VarChar(100)
  legalName    String?                @map("legal_name") @db.VarChar(100)
  cnpj         String?                @unique @db.VarChar(14)
  fone         String?                @db.VarChar(20)
  email        String?                @db.VarChar(50)
  active       Boolean                @default(true)
  createdAt    DateTime               @default(now()) @map("created_at") @db.DateTime(0)
  addresses    SupplierAddress[]
  users        User[]                 @relation("UserToSupplier")
  products     SupplierProduct[]
  deliveryDays SupplierDeliveryDays[]

  @@map("suppliers")
}

model SupplierAddress {
  id            String       @id @default(uuid())
  lograd        String       @db.VarChar(100)
  number        String       @db.VarChar(20)
  complement    String?      @db.VarChar(100)
  district      String       @db.VarChar(100)
  city          String       @db.VarChar(100)
  state         String       @db.VarChar(2)
  zipcode       String       @db.VarChar(9)
  supplierId    String       @map("supplier_id")
  addressTypeId String?      @map("address_type_id")
  supplier      Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  addressType   AddressType? @relation(fields: [addressTypeId], references: [id], onUpdate: NoAction)

  @@index([supplierId], map: "supplier_address_supplier_id_fkey")
  @@index([addressTypeId], map: "supplier_address_address_type_id_fkey")
  @@map("supplier_addresses")
}

model AddressType {
  id          String            @id @default(uuid())
  description String            @unique @db.VarChar(50)
  addresses   SupplierAddress[]

  @@map("address_types")
}

model Product {
  id                    String            @id @default(uuid())
  code                  String            @unique @db.VarChar(20)
  description           String            @db.VarChar(100)
  additionalDescription String?           @map("additional_description") @db.VarChar(200)
  active                Boolean           @default(true)
  createdAt             DateTime          @default(now()) @map("created_at") @db.DateTime(0)
  productTypeId         String            @map("product_type_id")
  productType           ProductType       @relation(fields: [productTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stockUnits            Units[]           @relation("stock_units")
  buyUnits              Units[]           @relation("buy_units")
  conversionFactor      Decimal           @default(1) @map("conversion_factor") @db.Decimal(15, 5)
  ERPCode               String?           @map("erp_code") @db.VarChar(20)
  suppliers             SupplierProduct[]
  supplierLeadTimeDays  Int?              @map("supplier_lead_time_days")
  stockLeadTimeDays     Int?              @map("stock_lead_time_days")
  productGroupId        String?           @map("product_group_id")
  productGroup          ProductGroup?     @relation(fields: [productGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("products")
}

model ProductType {
  id          String    @id @default(uuid())
  description String    @unique @db.VarChar(100)
  products    Product[]

  @@map("product_types")
}

model ProductGroup {
  id          String    @id @default(uuid())
  description String    @unique @db.VarChar(100)
  products    Product[]

  @@map("product_groups")
}

model Units {
  id          String    @id @default(uuid())
  description String    @unique @db.VarChar(100)
  abrev       String    @unique @db.VarChar(10)
  stockUNits  Product[] @relation("stock_units")
  buyUnits    Product[] @relation("buy_units")

  @@map("units")
}

model SupplierDeliveryDays {
  id         String   @id @default(uuid())
  supplierId String   @map("supplier_id")
  days       String   @db.VarChar(15) // 0 - domingo, 1 - segunda, 2 - terça, 3 - quarta, 4 - quinta, 5 - sexta, 6 - sábado
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  period     String?  @db.VarChar(10) // 0 - manhã, 1 - tarde, 2 - noite
  hour       String?  @db.VarChar(5)

  @@map("supplier_delivery_days")
}

model SupplierProduct {
  id                  String   @id @default(uuid())
  supplierId          String   @map("supplier_id")
  productId           String   @map("product_id")
  supplier            Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplierProductCode String   @map("supplier_product_code") @db.VarChar(20)
  minQty              Decimal? @map("min_qty") @db.Decimal(15, 5)
  buyQty              Decimal? @map("buy_qty") @db.Decimal(15, 5)
  leadTime            Int?     @map("lead_time")

  @@map("supplier_products")
}
